{"version":3,"sources":["backend.js","core/Card.js","core/Base.js","core/helper/coreapicalls.js","core/Home.js","core/updateMeme.js","Routes.js","index.js"],"names":["API","process","Card","meme","memeName","name","memeCaption","caption","memeImage","url","id","className","src","alt","style","maxHeight","maxWidth","to","_id","Base","title","description","useState","memes","setMemes","loading","error","createdMeme","getaRedirect","formData","values","setValues","setErr","loadAllMemes","fetch","method","then","response","json","catch","err","console","log","data","useEffect","FormData","onSubmit","event","preventDefault","headers","Accept","body","handleChange","value","target","set","type","onChange","autoFocus","required","placeholder","onClick","successMessage","map","index","Home","match","preload","memeId","getMemebyId","params","Routes","path","exact","component","updateMeme","ReactDOM","render","document","getElementById"],"mappings":"kKAAaA,G,MAAMC,mC,8BCqCJC,EAhCA,SAAC,GAEP,IADLC,EACI,EADJA,KAGMC,EAAWD,EAAMA,EAAKE,KAAO,iBAC7BC,EAAcH,EAAMA,EAAKI,QAAU,oBACnCC,EAAYL,EAAMA,EAAKM,IAAM,gBAEnC,OACE,qBAAKC,GAAG,KAAKC,UAAU,kDAAvB,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,4CAAf,SACE,qBACED,GAAG,MACHE,IAAKJ,EACLK,IAAI,QACJC,MAAO,CAAEC,UAAW,OAAQC,SAAU,QACtCL,UAAU,mBAGd,mBAAGD,GAAG,KAAN,SACCJ,IAED,qBAAKI,GAAG,QAAR,SAAiBN,IACjB,uBACA,uBACA,cAAC,IAAD,CAAMa,GAAE,wBAAmBd,EAAKe,KAAOR,GAAG,OAAOC,UAAU,4BAA3D,wBC6IKQ,EArKF,SAAC,GACP,IAAD,IADUC,aACV,MADkB,SAClB,MAD4BC,mBAC5B,MAD0C,oBAC1C,IAEuBC,mBAAS,IAFhC,mBAEKC,EAFL,KAEWC,EAFX,OAGyBF,mBAAS,CAChCjB,KAAO,GACPE,QAAS,GACTE,IAAM,GACNgB,SAAS,EACTC,MAAO,GACPC,YAAa,GACbC,cAAc,EACdC,SAAU,KAXZ,mBAGKC,EAHL,KAGYC,EAHZ,OAamBT,oBAAS,GAb5B,mBAaSU,GAbT,WAeK3B,EAAkEyB,EAAlEzB,KAAKE,EAA6DuB,EAA7DvB,QAAQE,EAAqDqB,EAArDrB,IAA2CoB,GAAUC,EAAjDL,QAAiDK,EAAzCJ,MAAyCI,EAAnCH,YAAmCG,EAAvBF,aAAuBE,EAAVD,UAE1DI,EAAe,WCRbC,MAAM,GAAD,OAAIlC,EAAJ,UAAgB,CACxBmC,OAAQ,QAEXC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MDGZJ,MAAK,SAAAO,GACTA,EAAKjB,MACJM,EAAOW,EAAKjB,OAEZF,EAASmB,OAQpBC,qBAAU,WAFNb,EAAU,2BAAKD,GAAN,IAAaD,SAAW,IAAIgB,YAIrCZ,MACD,IAEF,IAAMa,EAAW,SAACC,GCzCI,IAAC5C,ED0CnB4C,EAAMC,kBC1Ca7C,ED2CP0B,EC1CVK,MAAM,GAAD,OAAIlC,EAAJ,UAAgB,CACzBmC,OAAQ,OACRc,QAAU,CACTC,OAAO,oBAERC,KAAOhD,IAEPiC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEnBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,ODgCCJ,MAAK,SAAAO,GACpBA,EAAKjB,MACJK,EAAU,2BAAID,GAAL,IAAYJ,MAAMiB,EAAKjB,SAEhCK,EAAU,2BACHD,GADE,IAELzB,KAAM,GACNE,QAAU,GACVE,IAAM,GACNkB,YAAcgB,EAAKtC,YAQ9B+C,EAAe,SAAA/C,GAAI,OAAG,SAAA0C,GAC1B,IAAOM,EAAQN,EAAMO,OAAOD,MAC5BxB,EAAS0B,IAAIlD,EAAKgD,GAClBtB,EAAU,2BAAID,GAAL,kBAAazB,EAAQgD,OAsDhC,OACE,gCACE,qBAAK1C,UAAU,0BAAf,SACI,sBAAKA,UAAU,2CAAf,UACI,oBAAIA,UAAU,YAAd,SAA2BS,IAC3B,mBAAGT,UAAU,OAAb,SAAqBU,SAI7B,gCACC,oBAAIV,UAAU,yBAAd,iCACA,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,uBAAf,UApDP,iCACA,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,oBAAd,kBAEA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,QACvBC,MAAOhD,EACPqD,WAAS,EACTC,UAAQ,EACRC,YAAY,+BAIhB,sBAAKjD,UAAU,2BAAf,UACI,oBAAIA,UAAU,mBAAd,qBACA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,WACvBC,MAAO9C,EACPmD,WAAS,EACTC,UAAQ,EACRC,YAAY,sCAGhB,sBAAKjD,UAAU,aAAf,UACI,oBAAIA,UAAU,oBAAd,0BACA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,OACvBC,MAAO5C,EACPiD,WAAS,EACTC,UAAQ,EACRC,YAAY,oCAGhB,wBAASC,QAASf,EAAUnC,UAAU,sDAAtC,6BAkBWmD,UAIR,mBAAGpD,GAAG,KAAKC,UAAU,cAArB,0BACA,qBAAKD,GAAG,YAAYC,UAAU,uBAA9B,SACI,qBAAKA,UAAU,OAAf,SACEY,EAAMwC,KAAI,SAAC5D,EAAK6D,GACb,OACE,qBAAKtD,GAAG,QAAoBC,UAAU,cAAtC,SAEC,cAAC,EAAD,CAAMR,KAAMA,KAFQ6D,cEpIxB,SAASC,IAEpB,OADAxB,QAAQC,IAAI,SAAW1C,GAEnB,cAAC,EAAD,gBCPR,IAmJemB,EAnJF,SAAC,GAAa,IAAZ+C,EAAW,EAAXA,MAAW,EAGK5C,mBAAS,CAChCjB,KAAO,GACPE,QAAS,GACTE,IAAM,GACNgB,SAAS,EACTC,MAAO,GACPC,YAAa,GACbC,cAAc,EACdC,SAAU,KAXQ,mBAGfC,EAHe,KAGRC,EAHQ,KAef1B,EAAkEyB,EAAlEzB,KAAKE,EAA6DuB,EAA7DvB,QAAQE,EAAqDqB,EAArDrB,IAA2CoB,GAAUC,EAAjDL,QAAiDK,EAAzCJ,MAAyCI,EAAnCH,YAAmCG,EAAvBF,aAAuBE,EAAVD,UAIzDsC,EAAU,SAACC,IFCM,SAAAA,GACvB,OAAOlC,MAAM,GAAD,OAAIlC,EAAJ,kBAAiBoE,GAAS,CAClCjC,OAAS,QACVC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEnBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OENtB6B,CAAYD,GAAQhC,MAAK,SAAAO,GAClBA,EAAKjB,MACJK,EAAU,2BAAID,GAAL,IAAYJ,MAAMiB,EAAKjB,SAEhCK,EAAU,2BACHD,GADE,IAELzB,KAAOsC,EAAKtC,KACZE,QAAUoC,EAAKpC,QACfE,IAAMkC,EAAKlC,IACXoB,SAAW,IAAIgB,gBAM/BD,qBAAU,WACNuB,EAAQD,EAAMI,OAAOF,UAEtB,IAEF,IAAMtB,EAAW,SAACC,GFXG,IAACqB,EAAOjE,EEYzB4C,EAAMC,iBACNjB,EAAU,2BAAKD,GAAN,IAAcJ,MAAO,GAAID,SAAS,MFbzB2C,EEcPF,EAAMI,OAAOF,OFdCjE,EEcM0B,EFb7BK,MAAM,GAAD,OAAIlC,EAAJ,kBAAiBoE,GAAU,CACnCjC,OAAS,MACTc,QAAU,CACNC,OAAS,oBAGbC,KAAOhD,IACRiC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEnBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OEGoBJ,MAAK,SAAAO,GACvCA,EAAKjB,MACJK,EAAU,2BAAID,GAAL,IAAYJ,MAAMiB,EAAKjB,SAEhCK,EAAU,2BACHD,GADE,IAELzB,KAAM,GACNE,QAAU,GACVE,IAAM,UAQjB2C,EAAe,SAAA/C,GAAI,OAAG,SAAA0C,GAC1B,IAAOM,EAAQN,EAAMO,OAAOD,MAC5BxB,EAAS0B,IAAIlD,EAAKgD,GAClBtB,EAAU,2BAAID,GAAL,kBAAazB,EAAQgD,OAqDhC,OACE,gCACE,qBAAK1C,UAAU,0BAAf,SACI,sBAAKA,UAAU,2CAAf,UACI,oBAAIA,UAAU,YAAd,iBACA,mBAAGA,UAAU,OAAb,wBAGR,qBAAKA,UAAU,cAAf,SACG,sBAAKA,UAAU,uBAAf,UAjDP,iCACA,sBAAKA,UAAU,aAAf,UACI,oBAAIA,UAAU,oBAAd,kBAEA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,QACvBC,MAAOhD,EACPqD,WAAS,EACTC,UAAQ,EACRC,YAAY,+BAIhB,sBAAKjD,UAAU,2BAAf,UACI,oBAAIA,UAAU,mBAAd,qBACA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,WACvBC,MAAO9C,EACPmD,WAAS,EACTC,UAAQ,EACRC,YAAY,sCAGhB,sBAAKjD,UAAU,aAAf,UACI,oBAAIA,UAAU,oBAAd,0BACA,uBAAO6C,KAAK,OACZ7C,UAAU,oBACV8C,SAAUL,EAAa,OACvBC,MAAO5C,EACPiD,WAAS,EACTC,UAAQ,EACRC,YAAY,oCAGhB,wBAASC,QAASf,EAAUnC,UAAU,sDAAtC,4BAeSmD,WCpHES,EAXC,WACZ,OACI,cAAC,IAAD,UACA,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAYT,IAClC,cAAC,IAAD,CAAOO,KAAK,wBAAwBC,OAAK,EAACC,UAAWC,U,eCNjEC,EAASC,OAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,W","file":"static/js/main.2ad2be58.chunk.js","sourcesContent":["export const API = process.env.REACT_APP_BACKEND\r\n","import React from 'react'\r\nimport \"../styles.css\"\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n  const Card = ({\r\n    meme\r\n  }) => {\r\n\r\n    const memeName = meme? meme.name : \"Inception Name\"\r\n    const memeCaption = meme? meme.caption : \"Inception Caption\"\r\n    const memeImage = meme? meme.url : \"Inception URL\"\r\n    \r\n    return (\r\n      <div id=\"bd\" className=\"card text-white  border border-info h-200 w-100\">\r\n        <div className=\"card-body\">\r\n          <div className=\"rounded border border-success p-2 bg-dark\">\r\n            <img\r\n              id=\"pic\"\r\n              src={memeImage}\r\n              alt=\"photo\"\r\n              style={{ maxHeight: \"100%\", maxWidth: \"100%\" }}\r\n              className=\"mb-3 rounded\"\r\n            />\r\n          </div>\r\n          <p id=\"cp\" >\r\n          {memeCaption}\r\n          </p>\r\n          <div id=\"title\">{memeName}</div>\r\n          <br/>\r\n          <br/>\r\n          <Link to={`/memes/update/${meme._id}`} id=\"edit\" className=\"btn btn-md btn-dark mb-3 \"  >Edit</Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n","import React,{useState,useEffect} from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport Card from './Card';\r\nimport {createaMeme,getMemes} from \"./helper/coreapicalls\"\r\nimport \"../styles.css\"\r\n\r\n\r\nconst Base = ({ title = \"X Meme\", description = \"New kind of Media\",\r\n}) => {\r\n    \r\n    const [memes,setMemes] = useState([]);\r\n    const [values,setValues] = useState({\r\n        name : \"\",\r\n        caption :\"\",\r\n        url : \"\",\r\n        loading: false,\r\n        error: \"\",\r\n        createdMeme: \"\",\r\n        getaRedirect: false,\r\n        formData: \"\"\r\n    })\r\n    const [err,setErr] = useState(false);\r\n  \r\n    const {name,caption,url,loading,error,createdMeme,getaRedirect,formData}=values;\r\n\r\n   const loadAllMemes = () => {\r\n       getMemes().then(data => {\r\n           if(data.error){\r\n               setErr(data.error)\r\n           }else{\r\n               setMemes(data);\r\n           }\r\n       })\r\n   }\r\n\r\n    const preload = () => {\r\n        setValues({ ...values,formData : new FormData() })\r\n    }\r\n    useEffect(() => {\r\n        preload();\r\n        loadAllMemes();\r\n    }, [])\r\n\r\n     const onSubmit = (event) => {\r\n         event.preventDefault();\r\n         createaMeme(formData).then(data => {\r\n             if(data.error){\r\n                 setValues({...values,error:data.error})\r\n             }else{\r\n                 setValues({\r\n                     ...values,\r\n                     name :\"\",\r\n                     caption : \"\",\r\n                     url : \"\",\r\n                     createdMeme : data.name\r\n                     \r\n                 })\r\n               \r\n             }\r\n         })\r\n     }\r\n\r\n    const handleChange = name=> event => {\r\n      const  value = event.target.value\r\n      formData.set(name,value);\r\n      setValues({...values,[name] : value})\r\n    }\r\n  \r\n\r\n const successMessage = () => {\r\n    <div className=\"alert alert-success mt-3\" \r\n    style={{display:createdMeme ? \"\" : \"none\"}}\r\n    >\r\n    <h4 className=\"text-white\">{createdMeme} created successfully</h4>\r\n   </div> \r\n }\r\n\r\n\r\n   const myMemeForm = () => (\r\n    <form >\r\n    <div className=\"form-group\">\r\n        <h4 className=\" font-weight-bold\">Name</h4>\r\n        \r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"name\")}\r\n        value={name}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : Inception Meme\"\r\n        />\r\n       \r\n    </div>\r\n    <div className=\"form-group form-group-lg\" >\r\n        <h4 className=\"font-weight-bold\">Caption</h4>\r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"caption\")}\r\n        value={caption}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : This is my first Meme\"\r\n        />\r\n    </div>\r\n    <div className=\"form-group\" >\r\n        <h4 className=\" font-weight-bold\">URL of Image</h4>\r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"url\")}\r\n        value={url}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : Put your image here\"\r\n        />\r\n    </div>\r\n    <button  onClick={onSubmit} className=\"my-3 btn btn-outline-info btn-dark font-weight-bold\">Push it</button>\r\n</form>\r\n   )\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid m-0 p-0\">\r\n            <div className=\"jumbotron bg-dark text-white text-center\">\r\n                <h2 className=\"display-3\">{title}</h2>\r\n                <p className=\"lead\">{description}</p>\r\n            </div>  \r\n        </div>\r\n\r\n        <div>\r\n         <h3 className=\"text-white text-center\"> Post Your Own Meme</h3>\r\n         <div className=\"row d-flex \">\r\n           <div className=\"col-md-9 offset-md-2\">\r\n              {myMemeForm()} \r\n              {successMessage()}            \r\n           </div>\r\n       </div>\r\n       </div>\r\n       <p id=\"Rm\" className=\"text-center\">Recent Memes</p>\r\n       <div id=\"cards-row\" className=\"row text-center m-4 \">\r\n           <div className=\"row \">\r\n            {memes.map((meme,index)=> {\r\n                return(\r\n                  <div id=\"cards\" key={index} className=\"col-12 mb-4\">\r\n                    \r\n                   <Card meme={meme} />\r\n\r\n                  </div>\r\n\r\n\r\n                )\r\n\r\n           })} \r\n           \r\n\r\n           </div>\r\n             \r\n           \r\n       </div>\r\n        \r\n\r\n       </div>\r\n    \r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Base;","import {API} from \"../../backend\"\r\n\r\nexport const createaMeme = (meme) => {\r\n    return fetch(`${API}/memes`,{\r\n       method :\"POST\",\r\n       headers : {\r\n        Accept:\"application/json\"\r\n       },\r\n       body : meme,\r\n\r\n    }).then(response => {\r\n        return response.json()\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const getMemes = () => {\r\n    return fetch(`${API}/memes`,{\r\n        method: \"GET\"\r\n    })\r\n    .then(response => {\r\n        return response.json();\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\nexport const getMemebyId = memeId => {\r\n    return fetch(`${API}/memes/${memeId}`,{\r\n        method : \"GET\"\r\n    }).then(response => {\r\n        return response.json()\r\n    })\r\n    .catch(err => console.log(err));\r\n}\r\n\r\nexport const updateMeme = (memeId,meme)=> {\r\n    return fetch(`${API}/memes/${memeId}`, {\r\n        method : \"PUT\",\r\n        headers : {\r\n            Accept : \"application/json\"\r\n           \r\n        },\r\n        body : meme,\r\n    }).then(response => {\r\n        return response.json()\r\n    })\r\n    .catch(err => console.log(err))\r\n} \r\n","import React from 'react'\r\nimport \"../styles.css\"\r\nimport {API} from \"../backend\"\r\nimport Base from './Base';\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\n\r\nexport default function Home(){\r\n    console.log(\"API IS\" , API);\r\n    return (\r\n        <Base> </Base>\r\n    )\r\n}","import React,{useState,useEffect} from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {getMemebyId,updateMeme} from \"./helper/coreapicalls\"\r\nimport \"../styles.css\"\r\n\r\n\r\nconst Base = ({match}) => {\r\n    \r\n    // const [memes,setMemes] = useState([]);\r\n    const [values,setValues] = useState({\r\n        name : \"\",\r\n        caption :\"\",\r\n        url : \"\",\r\n        loading: false,\r\n        error: \"\",\r\n        createdMeme: \"\",\r\n        getaRedirect: false,\r\n        formData: \"\"\r\n    })\r\n\r\n  \r\n    const {name,caption,url,loading,error,createdMeme,getaRedirect,formData}=values;\r\n\r\n  \r\n\r\n    const preload = (memeId) => {\r\n        getMemebyId(memeId).then(data => {\r\n            if(data.error){\r\n                setValues({...values,error:data.error})\r\n            }else {\r\n                setValues({\r\n                    ...values,\r\n                    name : data.name,\r\n                    caption : data.caption,\r\n                    url : data.url,\r\n                    formData : new FormData()\r\n                })\r\n            }\r\n        })\r\n            \r\n    }\r\n    useEffect(() => {\r\n        preload(match.params.memeId);\r\n        // loadAllMemes();\r\n    }, [])\r\n\r\n     const onSubmit = (event) => {\r\n         event.preventDefault();\r\n         setValues({ ...values, error: \"\", loading: true })\r\n         updateMeme(match.params.memeId,formData).then(data => {\r\n             if(data.error){\r\n                 setValues({...values,error:data.error})\r\n             }else{\r\n                 setValues({\r\n                     ...values,\r\n                     name :\"\",\r\n                     caption : \"\",\r\n                     url : \"\"\r\n                     \r\n                 })\r\n               \r\n             }\r\n         })\r\n     }\r\n\r\n    const handleChange = name=> event => {\r\n      const  value = event.target.value\r\n      formData.set(name,value);\r\n      setValues({...values,[name] : value})\r\n    \r\n    }\r\n  \r\n\r\n const successMessage = () => {\r\n    <div className=\"alert alert-success mt-3\" >\r\n    <h4 className=\"text-white\">{createdMeme} created successfully</h4>\r\n   </div> \r\n }\r\n\r\n\r\n   const myMemeForm = () => (\r\n    <form >\r\n    <div className=\"form-group\">\r\n        <h4 className=\" font-weight-bold\">Name</h4>\r\n        \r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"name\")}\r\n        value={name}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : Inception Meme\"\r\n        />\r\n       \r\n    </div>\r\n    <div className=\"form-group form-group-lg\" >\r\n        <h4 className=\"font-weight-bold\">Caption</h4>\r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"caption\")}\r\n        value={caption}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : This is my first Meme\"\r\n        />\r\n    </div>\r\n    <div className=\"form-group\" >\r\n        <h4 className=\" font-weight-bold\">URL of Image</h4>\r\n        <input type=\"text\"\r\n        className=\"form-control my-3\"\r\n        onChange={handleChange(\"url\")}\r\n        value={url}\r\n        autoFocus\r\n        required\r\n        placeholder=\"For ex : Put your image here\"\r\n        />\r\n    </div>\r\n    <button  onClick={onSubmit} className=\"my-3 btn btn-outline-info btn-dark font-weight-bold\">Update</button>\r\n</form>\r\n   )\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"container-fluid m-0 p-0\">\r\n            <div className=\"jumbotron bg-dark text-white text-center\">\r\n                <h2 className=\"display-3\">dsd</h2>\r\n                <p className=\"lead\">dasda</p>\r\n            </div>  \r\n        </div>\r\n        <div className=\"row d-flex \">\r\n           <div className=\"col-md-9 offset-md-2\">\r\n            {myMemeForm()}\r\n            {successMessage()}\r\n        </div>\r\n        </div>\r\n\r\n        </div>\r\n    \r\n\r\n                )\r\n\r\n       \r\n           \r\n\r\n    \r\n    \r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nexport default Base;","import React from 'react'\r\nimport {BrowserRouter,Switch,Route} from \"react-router-dom\"\r\nimport Home from \"./core/Home\"\r\nimport updateMeme from './core/updateMeme'\r\n\r\n const Routes = () => {\r\n    return (\r\n        <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/\" exact component= {Home} />\r\n            <Route path=\"/memes/update/:memeId\" exact component={updateMeme}/>\r\n        </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default Routes;","import React from 'react'\r\nimport Routes from './Routes'\r\nimport ReactDOM from \"react-dom\" //this is used to render the element\r\n\r\nReactDOM.render(<Routes />,document.getElementById(\"root\"))\r\n\r\n"],"sourceRoot":""}